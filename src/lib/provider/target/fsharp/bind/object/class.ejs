<% include classHeader %>
<% if ($subType === 'enumeration') {%><% include enum %><% }
else {

if ((typeof(append) !== 'undefined') && (append)) {
%><%- $u.i(i, '  ') %>and
<%
    i = 1;
}
%><%- $u.i(i, '  ') %>[<System.CLSCompliant (true)>]
<%- $u.i(i, '  ') %>[<System.Serializable ()>]
<%- $u.i(i, '  ') %>[<DataContract>]
<%- $u.i(i, '  ') %>[<AllowNullLiteral>]
<%- $u.i(i, '  ') %><% if ((typeof(append) !== 'undefined') && (append)) {
%><% } else { %>type <% } %><%= name %>() =
<% if (typeof(implements) !== 'undefined') {
    (implements || []).forEach(function (i) {
        var $nschemaType = i;
%><%- $u.i(i, '  ') %>  implements <% include ../typeName %>
<%- $u.i(i, '  ') %><%
    });
}
%><% for(var prop in properties) {
        var $property = properties[prop];
        var $nschemaType = properties[prop].type;
        var $registeredType = $nschema.getObject($nschemaType.namespace || namespace || '', $nschemaType.name) || $nschemaType;
%><%- $u.i(i, '  ') %>  /// <summary><%- properties[prop].description || '' %></summary>
<%- $u.i(i, '  ') %>  <% if ($registeredType && $registeredType.$subType === 'enumeration') { %>[<JsonConverter(typeof<StringEnumConverter>)>]
<%- $u.i(i, '  ') %>  <% } %><% if (($property.options || {}).ignoreSerialization) { %>[<System.Runtime.Serialization.IgnoreDataMember>][<System.Xml.Serialization.XmlIgnore()>][<JsonIgnore()>]<% } else { %>[<DataMember>][<JsonProperty("<%- prop %>")>]<% } %> member val <%- properties[prop].fsharpName || $nschema.utils.initialCaps(prop) %>: <% include ../typeName %> = <% include ../typeDefaultValue %> with get, set
<% } %><% } %>