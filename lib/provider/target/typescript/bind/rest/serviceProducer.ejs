<%
//Options are "NineJS" (default) || "Angular2"
var restClientStrategy = $target.$restClientStrategy || 'NineJS';
var $deferredType;
if (restClientStrategy === 'NineJS') {
    if (!$context.imports['ninejs/request']) {
        $context.imports['ninejs/request'] = {};
    }
    $context.imports['ninejs/request']['default as request'] = false;

    $deferredType = 'Promise';
} else if (restClientStrategy === 'Angular2') {
    if (!$context.imports['@angular/core']) {
    	$context.imports['@angular/core'] = {};
    }
    $context.imports['@angular/core']['Injectable'] = true;

    if (!$context.imports['@angular/http']) {
        $context.imports['@angular/http'] = {};
    }
    $context.imports['@angular/http']['Http'] = false;
    $context.imports['@angular/http']['Response'] = false;
    $context.imports['@angular/http']['Headers'] = false;
    $context.imports['@angular/http']['RequestOptions'] = false;
	$context.imports['@angular/http']['URLSearchParams'] = false;

    if (!$context.imports['rxjs/Rx']) {
        $context.imports['rxjs/Rx'] = {};
    }
    $context.imports['rxjs/Rx']['Observable'] = false;

    $deferredType = 'Observable';
}
else {
	throw new Error('Rest strategy not implemented: ' + restClientStrategy);
}
if (!$skipWrite) {
    function computeImportMatrix(localNamespace, namespaceMapping) {
        var rootContext = {
            imports: {}
        };

        Object.keys($context.imports).forEach(function (p) {
            if (!rootContext.imports[p]) {
                rootContext.imports[p] = {};

                var ns = $context.imports[p];
                Object.keys(ns).forEach(function (name) {
                    rootContext.imports[p][name] = true;
                });
            }
        });
        Object.keys(rootContext.imports)
                .filter(function (p) {
                    return p !== localNamespace;
                })
                .map(function (p) {
%>import { <%= Object.keys(rootContext.imports[p]).join(', ') %> } from '<%=  namespaceMapping[p] || ('./' + p) %>';
<%
                });
    }
    computeImportMatrix(namespace, $target.$namespaceMapping || {});
}
 %>

<% if (restClientStrategy === 'Angular2') {%>

// Import RxJs required methods
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/catch';

let $toJson = (res: Response) => {
    let body = res.json();
    return body;
};

@Injectable()<% }%>
export class <%= name %> {

<% if (restClientStrategy === 'Angular2') {%>
    $endpointUrl: string;

    constructor (private http: Http) {
    }
<% } else if (restClientStrategy === 'NineJS') { %>
    constructor (private $endpointUrl: string) {
    }
<% } %>

<% for (var op in operations) {
        var $inMessage = operations[op].inMessage;
        var $outMessage = operations[op].outMessage;
        var $nschemaMessage,
            $nschemaMessageDirection, 
            route,
            method,
            paramsInRoute,
            paramsInQuery,
            paramsInHeader,
            paramsOutHeader,
            paramsInBody,
            paramsOutBody;
        route = operations[op].route || op;
    method = (operations[op].method || 'get').toLowerCase();
    function getType (p) {
        return (typeof(p.type) === 'string')? { namespace: '', name: p.type } : p.type;
    }
    function includeInRoute (p) {
        var t = getType (p);
        return (route.indexOf('{' + p.name + '}') >= 0) &&
                ((!p.modifier) || (!p.modifier.length)) &&
                (t.namespace === '') &&
                (t.name === 'string' || t.name === 'int' || t.name === 'float' || t.name === 'bool' || t.name === 'date');
    }
    function includeInQuery (p) {
        var t = getType (p);
        return (p.paramType === 'query') &&
                ((!p.modifier) || (!p.modifier.length)) &&
                (t.namespace === '') &&
                (t.name === 'string' || t.name === 'int' || t.name === 'float' || t.name === 'bool' || t.name === 'date');
    }
    function includeInHeader (p) {
        var t = getType (p);
        return (p.paramType === 'header');
    }
    var allParams = $inMessage.data.slice(0);
    var allOutParams = $outMessage.data.slice(0);
    paramsInRoute =
            allParams
                    .filter(includeInRoute)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInRoute(p); });
    paramsInQuery =
            allParams
                    .filter(includeInQuery)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInQuery(p); });
    paramsInHeader =
            allParams
                    .filter(includeInHeader);
    allParams = allParams.filter(function (p) { return !includeInHeader(p); });
    paramsInBody =
            allParams
                    .filter(function (p) {
                        return !includeInRoute(p);
                    });
    paramsOutHeader =
            $outMessage.data.slice(0)
                    .filter(includeInHeader);
    paramsOutBody =
            allOutParams
                    .filter(function (p) {
                        return !includeInHeader(p);
                    });
    if ((method === 'get') && (paramsInBody.length)) {
        throw new Error('Service "' + name + '" : operation "' + op + '" has method GET and body parameters. Fix this to continue.');
    }
    %>    /// <summary><%- operations[op].description || '' %></summary>
<% $inMessage.data.forEach(function (par) {
%>    /// <param name="<%- par.name %>"><%- par.description || '' %></param>
<% }); %>    /// <returns><%- $outMessage.data.map(function (d) { return d.description || ''; }).join(', ') %></returns>
    <%= op %> (<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %>: <%= $typescript.typeName(par.type, $nschema, null, null, $context) %><% }); %> )  : <%= $deferredType %><<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>> {
        let $options<% if (restClientStrategy === 'Angular2') { %> = new RequestOptions();<% } else { %>: any = {};<% } %>
<% if (paramsInQuery.length) { %>
<%      if (restClientStrategy === 'NineJS') {%>
        let $queryString = <%- '\'?' + paramsInQuery.map(function (p) { return p.name + '=\' + encodeURIComponent(' + p.name + ' + \'\')' }).join(' + \'&') %>;
<% } else if (restClientStrategy === 'Angular2') {%>
        let $queryParams: URLSearchParams = new URLSearchParams();
<% paramsInQuery.forEach(function (p) {
%>        if (typeof(<%= p.name %>) !== undefined) {
            $queryParams.set('<%= p.name %>', <%= p.name %>.toString());
        }
<%
        }) %>
        $options.params = $queryParams;
<% } %>
<% } %>
        $options.headers = <% if (restClientStrategy === 'Angular2') { %> new Headers(<% } %>
            {
                "Content-Type": "application/json",
                <%- paramsInHeader.map(function (p) { return '"' + (p.headerName || ('X-' + p.name)) + '": ' + p.name; }).join(',\n                ') %>
            }<% if (restClientStrategy === 'Angular2') { %>
        )<% } %>;
<% if (['get', 'delete', 'head'].indexOf(method.toLowerCase()) < 0) {
                if (paramsInBody.length) {%>
        let $body = JSON.stringify(<% if (paramsInBody.length > 1) { %>[ <% } %><%- paramsInBody.map(function (d) { return d.name; }).join(', ') %><% if (paramsInBody.length > 1) { %> ]<% } %>);
<%
                }
                else {%>
        let $body = '';
                <%}
                }%>
<% if (restClientStrategy === 'NineJS') { %>
        $options.method = '<%- method.toLowerCase() %>';
        $options.url = (this.$endpointUrl + [<%- paramsInRoute.map(function (p) { return '\'\' + ' + p.name; }).join(', ') %>].reduce((acc, next: string) => acc.split(`{${next}}`).join(next), '<%= route %>'))<% if (paramsInQuery.length) { %> + $queryString<% } %>;
        <% if (['get', 'delete', 'head'].indexOf(method.toLowerCase()) < 0) { %>$options.data = $body;<% } %>
        $options.handleAs = 'json';
        return request($options);
<% } else if (restClientStrategy === 'Angular2') { %>
        return this.http.<%- method.toLowerCase() %>(this.$endpointUrl + [<%- paramsInRoute.map(function (p) { return '\'\' + ' + p.name; }).join(', ') %>].reduce((acc, next: string) => acc.split(`{${next}}`).join(next), '<%= route %>'),<% if (['get', 'delete', 'head'].indexOf(method.toLowerCase()) < 0) { %> $body,<% } %> $options)
                    .map($toJson)
                    .catch((error) => {
                        return this.$errorHandler(error, '<%- op %>');
                    });
<% } %>
    }

<% } %>
<%   if (restClientStrategy === 'Angular2') {%>
    $errorHandler (error:any, operationName: string) {
        return Observable.throw(error.json().error || 'Server error');
    };
<% } %>
}