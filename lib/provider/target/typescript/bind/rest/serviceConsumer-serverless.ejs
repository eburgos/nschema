import { EventEmitter } from 'events';
import $ImplementationService from '<%= $u.relativePath($u.resolvePath($target.location, $target.$serverless.yamlPath), $u.resolvePath($target.location, $target.$serverless.implementation)) %>';
<%
function realTypeMap(p, expr) {
    switch ((p.realType || {}).name) {
        case 'string':
            return expr;
        case 'int':
        case 'float':
            return 'Number(' + expr + ')';
        case 'bool':
            return '(' + expr + ' === \'true\')';
        case 'date':
            return '(new Date(' + expr + '))';
        default:
            return null;
    }
}
function getHttpVerb(v) {
	if (v === 'delete') {
		return 'del';
    }
    return v;
}

$routePrefix = (typeof(routePrefix) !== 'undefined')? routePrefix : '';
%>

export interface <%= name %> {
<% for (var op in operations) {
    var $inMessage = operations[op].inMessage;
    var $outMessage = operations[op].outMessage;
    var $nschemaMessage,
            $nschemaMessageDirection;

%>    <%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %>: <%= $typescript.typeName(par.type, $nschema, null, null, $context) %><% }); %><%= $inMessage.data.length?', ': ''%>$ctx: { event: any, context: any } )  : Promise<<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>>;
<% } %>

    on(eventName: 'callStarted', handler: (eventData: { name: string, timestamp: Date }) => any): this;
    on(eventName: 'callCompleted', handler: (eventData: { name: string, timestamp: Date, result: any }) => any): this;
    on(eventName: 'operationError', handler: (eventData: { name: string, timestamp: Date, error: Error }) => any): this;
    on(eventName: string, handler: Function): this;
}

export abstract class <%= name %>Base extends EventEmitter implements <%= name %> {
    //logger: Logger;

<% for (var op in operations) {
    var $inMessage = operations[op].inMessage;
    var $outMessage = operations[op].outMessage;
    var $nschemaMessage,
        $nschemaMessageDirection;
%>    abstract async <%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %>: <%= $typescript.typeName(par.type, $nschema, null, null, $context) %><% }); %><%= $inMessage.data.length?', ': ''%>$ctx: { event: any, context: any } )  : Promise<<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>>;
    protected async $raw<%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %>: <%= $typescript.typeName(par.type, $nschema, null, null, $context) %><% }); %>, $ctx: { event: any, context: any })  : Promise<<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>> {
        this.emit('callStarted', { name: '<%= op %>', timestamp: new Date() });
        let result = await this.<%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %><% }); %><%= $inMessage.data.length?', ':''%> $ctx );
        this.emit('callCompleted', { name: '<%= op %>', timestamp: new Date(), context: $ctx });
        return result;
    }
<% } %>

};

let $service = new $ImplementationService();

<% for (var op in operations) {
    var $inMessage = operations[op].inMessage;
    var $outMessage = operations[op].outMessage;
    var $nschemaMessage,
            $nschemaMessageDirection,
            route,
            method,
            paramsInRoute,
            paramsInQuery,
            paramsInHeader,
            paramsOutHeader,
            paramsInBody,
            paramsOutBody;
    route = operations[op].route || op;
    method = (operations[op].method || 'get').toLowerCase();
    function getType (p) {
        return (typeof(p.type) === 'string')? { namespace: '', name: p.type } : p.type;
    }
    function includeInRoute (p) {
        var t = getType (p);
        return (route.indexOf('{' + p.name + '}') >= 0) &&
                ((!p.modifier) || (!p.modifier.length)) &&
                (t.namespace === '') &&
                (t.name === 'string' || t.name === 'int' || t.name === 'float' || t.name === 'bool' || t.name === 'date');
    }
    function includeInQuery (p) {
        var t = getType (p);
        return (p.paramType === 'query') &&
                ((!p.modifier) || (!p.modifier.length)) &&
                (t.namespace === '') &&
                (t.name === 'string' || t.name === 'int' || t.name === 'float' || t.name === 'bool' || t.name === 'date');
    }
    function includeInHeader (p) {
        var t = getType (p);
        return (p.paramType === 'header');
    }
    var allParams = $inMessage.data.slice(0);
    var allOutParams = $outMessage.data.slice(0);
    paramsInRoute =
            allParams
                    .filter(includeInRoute)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInRoute(p); });
    paramsInQuery =
            allParams
                    .filter(includeInQuery)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInQuery(p); });
    paramsInHeader =
            allParams
                    .filter(includeInHeader)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInHeader(p); });
    paramsInBody =
            allParams
                    .filter(function (p) {
                        return !includeInRoute(p);
                    });
    paramsOutHeader =
            $outMessage.data.slice(0)
                    .filter(includeInHeader);
    paramsOutBody =
            allOutParams
                    .filter(function (p) {
                        return !includeInHeader(p);
                    });
%>
export function <%=op%>(event: any, context: any, callback: (err: Error, r: any) => void) {
    let input: any = {};
<% paramsInRoute.forEach(function (p) {
%>                input['<%= p.name %>'] = <%- realTypeMap(p, 'event.pathParameters[\'' + p.name + '\']') %>;
<%
}); %><% paramsInQuery.forEach(function (p) {
%>                input['<%= p.name %>'] = <%- realTypeMap(p, 'event.queryParameters[\'' + (p.paramName || p.name) + '\']') %>;
<%
}); %><% paramsInHeader.forEach(function (p) {
%>                input['<%= p.name %>'] = <%- realTypeMap(p, 'event.headers[\'' + (p.headerName || ('X-' + p.name)) + '\']') %>;
<%
}); %><% if (paramsInBody.length === 1) {
%>                input['<%= paramsInBody[0].name %>'] = event.body;
<%
} else if (paramsInBody.length) { paramsInBody.forEach(function (p, idx) {
%>                input['<%= p.name %>'] = event.body[<%= idx %>];
<%
}); } %>
    let $req = input as <% $nschemaMessage = $inMessage; $nschemaMessageDirection = 'in'; %><% include ../messageType %>;

    $service.<%=op%>(<%- ($inMessage.data.length === 1)? '$req, ' :$inMessage.data.map(function (p) { return '$req.' + p.name + ', '; }).join('') %>{ event: event, context: context })
        .then((result: <% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>) => {
        let response = {
            statusCode: context.statusCode || 200,
            body: JSON.stringify(result)
        };
        callback(null, response);
    }).catch((err: Error) => {
        callback(err, null);
    });
}

<% } %>