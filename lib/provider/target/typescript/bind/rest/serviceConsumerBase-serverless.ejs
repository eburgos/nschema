import { EventEmitter } from 'events';
<%
function realTypeMap(p, expr) {
    switch ((p.realType || {}).name) {
        case 'string':
            return expr;
        case 'int':
        case 'float':
            return 'Number(' + expr + ')';
        case 'bool':
            return '(' + expr + ' === \'true\')';
        case 'date':
            return '(new Date(' + expr + '))';
        default:
            return null;
    }
}
function getHttpVerb(v) {
	if (v === 'delete') {
		return 'del';
    }
    return v;
}

$routePrefix = (typeof(routePrefix) !== 'undefined')? routePrefix : '';
%>

export interface <%= name %> {
<% for (var op in operations) {
    var $inMessage = operations[op].inMessage;
    var $outMessage = operations[op].outMessage;
    var $nschemaMessage,
            $nschemaMessageDirection;

%>
    /**
     * <%- (operations[op].description || '').replace(/\n/g, '\n     * ') %>

<% $inMessage.data.forEach(function (par) {
%>     * @param <%- par.name %> - <%- (par.description || '').replace(/\n/g, '\n     * ') %>
<% }); %>     * @returns <%- $outMessage.data.map(function (d) { return (d.description || '').replace(/\n/g, '\n     * '); }).join(', ') %>
     */
    <%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %>: <%= $typescript.typeName(par.type, $nschema, null, null, $context) %><% }); %><%= $inMessage.data.length?', ': ''%>$ctx: { event: any, context: any } )  : Promise<<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>>;
<% } %>

    on(eventName: 'callStarted', handler: (eventData: { name: string, timestamp: Date }) => any): this;
    on(eventName: 'callCompleted', handler: (eventData: { name: string, timestamp: Date, result: any }) => any): this;
    on(eventName: 'operationError', handler: (eventData: { name: string, timestamp: Date, error: Error }) => any): this;
    on(eventName: string, handler: Function): this;
}

export abstract class <%= name %>Base extends EventEmitter implements <%= name %> {
    //logger: Logger;

<% for (var op in operations) {
    var $inMessage = operations[op].inMessage;
    var $outMessage = operations[op].outMessage;
    var $nschemaMessage,
        $nschemaMessageDirection;
%>    abstract async <%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %>: <%= $typescript.typeName(par.type, $nschema, null, null, $context) %><% }); %><%= $inMessage.data.length?', ': ''%>$ctx?: { event: any, context: any } )  : Promise<<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>>;
    protected async $raw<%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %>: <%= $typescript.typeName(par.type, $nschema, null, null, $context) %><% }); %>, $ctx: { event: any, context: any })  : Promise<<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>> {
        this.emit('callStarted', { name: '<%= op %>', timestamp: new Date() });
        let result = await this.<%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %><% }); %><%= $inMessage.data.length?', ':''%> $ctx );
        this.emit('callCompleted', { name: '<%= op %>', timestamp: new Date(), context: $ctx });
        return result;
    }
<% } %>

};

