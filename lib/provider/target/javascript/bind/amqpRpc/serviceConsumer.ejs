namespace {{= namespace }}

open Newtonsoft.Json
open Newtonsoft.Json.Converters
open System.Runtime.Serialization
open RabbitMQ.Client

/// <summary>{{ if (typeof(description) === 'string') { }}{{= description }}{{ } }}</summary>
[<AbstractClass>]
type {{= name }}Consumer(connectionString: string, queueName: string) =

{{ for(var op in operations) {
var $inMessage = operations[op].inMessage;
var $outMessage = operations[op].outMessage;
var $nschemaMessage,
    $nschemaMessageDirection;
}}    /// <summary>{{- operations[op].description || '' }}</summary>
{{ $inMessage.data.forEach(function (par) {
}}    /// <param name="{{- par.name }}">{{- par.description || '' }}</param>
{{ }); }}    /// <returns>{{- $outMessage.data.map(function (d) { return d.description || ''; }).join(', ') }}</returns>
    abstract member {{= op }}: {{ $nschemaMessage = $inMessage; $nschemaMessageDirection = 'in'; }} -> ({{ $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; }})
{{ } }}
    interface System.IDisposable with
        member this.Dispose () =
            this._disposables
            |> Seq.iter (fun d -> d.Dispose () )