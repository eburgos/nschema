namespace <%= namespace %>

open System.Runtime.Serialization
open Newtonsoft.Json
open FSharp.Data

type <%= name %> (_url: string, _headers: (string * string) list) =
<% include ../arraySplit %>
    new (_url: string) = new ProdoctivityApiService (_url, [])
    new (_url: string, user: string, password: string) = new ProdoctivityApiService (_url, [("Authorization", "Basic " + user + ":" + password)] )
    static member private _serializeJson o =
        let sb = new System.Text.StringBuilder()
        use textWriter = new System.IO.StringWriter(sb)
        use writer = new Newtonsoft.Json.JsonTextWriter(textWriter)
        let serializer = new Newtonsoft.Json.JsonSerializer()
        serializer.Serialize(writer, o)
        do
            writer.Flush()
        sb.ToString()
<% for (var op in operations) {
        var $inMessage = operations[op].inMessage;
        var $outMessage = operations[op].outMessage;
        var $nschemaMessage,
            $nschemaMessageDirection, 
            route,
            method,
            paramsInRoute,
            paramsInQuery,
            paramsInHeader,
            paramsInBody;
        route = operations[op].route || op;
    method = (operations[op].method || 'get').toLowerCase();
    function getType (p) {
        return (typeof(p.type) === 'string')? { namespace: '', name: p.type } : p.type;
    }
    function includeInRoute (p) {
        var t = getType (p);
        return (route.indexOf('{' + p.name + '}') >= 0) &&
                ((!p.modifier) || (!p.modifier.length)) &&
                (t.namespace === '') &&
                (t.name === 'string' || t.name === 'int' || t.name === 'float' || t.name === 'bool' || t.name === 'date');
    }
    function includeInQuery (p) {
        var t = getType (p);
        return (p.paramType === 'query') &&
                ((!p.modifier) || (!p.modifier.length)) &&
                (t.namespace === '') &&
                (t.name === 'string' || t.name === 'int' || t.name === 'float' || t.name === 'bool' || t.name === 'date');
    }
    function includeInHeader (p) {
        var t = getType (p);
        return (p.paramType === 'header');
    }
    var allParams = $inMessage.data.slice(0);
    paramsInRoute =
            allParams
                    .filter(includeInRoute)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInRoute(p); });
    paramsInQuery =
            allParams
                    .filter(includeInQuery)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInQuery(p); });
    paramsInHeader =
            allParams
                    .filter(includeInHeader);
    allParams = allParams.filter(function (p) { return !includeInHeader(p); });
    paramsInBody =
            allParams
                    .filter(function (p) {
                        return !includeInRoute(p);
                    });
    if ((method === 'get') && (paramsInBody.length)) {
        throw new Error('Service "' + name + '" : operation "' + op + '" has method GET and body parameters. Fix this to continue.');
    }
    %>    /// <summary><%- operations[op].description || '' %></summary>
<% $inMessage.data.forEach(function (par) {
%>    /// <param name="<%- par.name %>"><%- par.description || '' %></param>
<% }); %>    /// <returns><%- $outMessage.data.map(function (d) { return d.description || ''; }).join(', ') %></returns>
    member this.<%= op %><% if (!$inMessage.data.length) {%> () <%} else { $inMessage.data.forEach(function (par) {
%> (<%= par.name %>: <%= $fsharp.typeName(par.type, $nschema) %>)<% }); } %> : (<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>) =
        let _query =
            <% if (paramsInQuery.length) { %>[ <%- paramsInQuery.map(function (p) { return '("' + p.name + '", ' + p.name + ' |> string)'; }).join('; ') %> ]<% } else { %>[]<% } %>
        <% if (paramsInHeader.length) { %>
        let _headers =
            [ [ <%- paramsInHeader.map(function (p) { return '("' + p.name + '", ' + p.name + ' |> ' + name + '._serializeJson)'; }).join('; ') %> ]; _headers ] |> List.concat <%
        }%>
        <% if (paramsInBody.length) {%>let _body =
            <% if (paramsInBody.length > 1) { %>"[" + <% } %><%- paramsInBody.map(function (d) { return '(' + d.name + ' |> ' + name + '._serializeJson )'; }).join(' + ') %><% if (paramsInBody.length > 1) { %> + "]"<% } %>
            |> HttpRequestBody.TextRequest
<% }%>
            
        let response = Http.Request (_url + System.String.Format("<%- route %>"), silentHttpErrors = true, query=_query, headers=_headers, httpMethod="<%- method.toUpperCase() %>"<% if (paramsInBody.length) { %>, body=_body<% }%>)
        match response.StatusCode with
        | 200 ->
            let value =
                match response.Body with
                | HttpResponseBody.Binary b ->
                    b
                    |> System.Text.Encoding.UTF8.GetString
                | HttpResponseBody.Text s ->
                    s
<% if ($outMessage.data.length > 1) {%>
            let result =
                let resultList =
                    value
                    |> arraySplit
<% $outMessage.data.forEach (function (par, idx) {%>
                let output<%=idx%> =
                    Newtonsoft.Json.JsonConvert.DeserializeObject<<%= $fsharp.typeName(par.type, $nschema) %>> (resultList |> List.head)
                let resultList = resultList |> List.tail
<% }) %>
                <%- $outMessage.data.map (function (par, idx) { return 'output' + idx; }).join (', ') %>
            result
<% } else if ($outMessage.data.length === 1) { %>
            Newtonsoft.Json.JsonConvert.DeserializeObject< <%= $fsharp.typeName($outMessage.data[0].type, $nschema) %> > (value)
<% } else { %>()<% } %>

        | 404 ->
            Unchecked.defaultof< <% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %> >
        | statusCode ->
            let httpCode = System.Enum.ToObject(typedefof<System.Net.HttpStatusCode>, statusCode) :?> System.Net.HttpStatusCode
            let ex = new System.Exception(System.String.Format("Returned HTTP Status Code: {0} = {1}", statusCode, httpCode))
            raise ex
<% } %>
    interface System.IDisposable with
        member this.Dispose () =
            ()