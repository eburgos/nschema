<%
    if (!$nschemaMessage) {
        throw new Error('$nschemaMessage context variable must be present. If you referenced this inside a loop make sure that variable is set.');
    }
    if (!$nschemaMessageDirection) {
        throw new Error('$nschemaMessageDirection context variable must be present. If you referenced this inside a loop make sure that variable is set.');
    }
    (function () {
        var $_typeSeparator,
            $_result,
            $_typeMap = function (t) {
                switch (t) {
                    case 'int': return 'number';
                    case 'float': return 'number';
                    case 'string': return 'string';
                }
                return 'string';
            };
        if ($nschemaMessageDirection === 'in') {
            $_typeSeparator = ', ';
        }
        else if ($nschemaMessageDirection === 'out') {
            $_typeSeparator = ', ';
        }
        function $_getDataItems (nsMessage) {
            var r = [],
                parent;
            if (nsMessage.$inherits) {
                parent = $nschema.getMessage(nsMessage.$inherits.namespace || '', nsMessage.$inherits.name);
                if (parent) {
                    $_getDataItems(parent).forEach(function (i) {
                        r.push(i);
                    });
                }
                else {
                    console.log('could not find parent: ns=' + (nsMessage.$inherits.namespace || '') + ' name=' + nsMessage.$inherits.name);
                }
            }
            (nsMessage.data || []).map(function (item) {
                r.push(item);
            });
            return r;
        }
        var $_dataItems = $_getDataItems($nschemaMessage);
        if ($_dataItems.length === 1) {
        	var item = $_dataItems[0];
            //var $_type = $nschema.getObject(item.namespace || '', item.name);
            $_result = `${$typescript.typeName(item.type, $nschema, null, null, $context)}`;
        }
        else {
            $_result = $_dataItems.map(function (item, $i) {
                //var $_type = $nschema.getObject(item.namespace || '', item.name);
                return `${item.name || ('item' + $i)}: ${$typescript.typeName(item.type, $nschema, null, null, $context)}`;
            });

            $_result = ('{ ' + $_result.join($_typeSeparator) + ' }') || 'void';
        }
%><%- $_result %><% })(); %>