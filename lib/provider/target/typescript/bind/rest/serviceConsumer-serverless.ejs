import $ImplementationService from '<%= $u.relativePath($u.resolvePath($target.location, $target.$serverless.yamlPath), $u.resolvePath($target.location, $target.$serverless.implementation)) %>';
import { <%= name %>Base  } from "./<%= name %>Base";
<%
function realTypeMap(p, expr) {
    switch ((p.realType || {}).name) {
        case 'string':
            return expr;
        case 'int':
        case 'float':
            return 'Number(' + expr + ')';
        case 'bool':
            return '(' + expr + ' === \'true\')';
        case 'date':
            return '(new Date(' + expr + '))';
        default:
            return null;
    }
}
function getHttpVerb(v) {
	if (v === 'delete') {
		return 'del';
    }
    return v;
}

$routePrefix = (typeof(routePrefix) !== 'undefined')? routePrefix : '';
%>

let $service: <%= name %>Base = new $ImplementationService();

<% for (var op in operations) {
    var $inMessage = operations[op].inMessage;
    var $outMessage = operations[op].outMessage;
    var $nschemaMessage,
            $nschemaMessageDirection,
            route,
            method,
            paramsInRoute,
            paramsInQuery,
            paramsInHeader,
            paramsOutHeader,
            paramsInBody,
            paramsOutBody;
    route = operations[op].route || op;
    method = (operations[op].method || 'get').toLowerCase();
    function getType (p) {
        return (typeof(p.type) === 'string')? { namespace: '', name: p.type } : p.type;
    }
    function includeInRoute (p) {
        var t = getType (p);
        return (route.indexOf('{' + p.name + '}') >= 0) &&
                ((!p.modifier) || (!p.modifier.length)) &&
                (t.namespace === '') &&
                (t.name === 'string' || t.name === 'int' || t.name === 'float' || t.name === 'bool' || t.name === 'date');
    }
    function includeInQuery (p) {
        var t = getType (p);
        return (p.paramType === 'query') &&
                ((!p.modifier) || (!p.modifier.length)) &&
                (t.namespace === '') &&
                (t.name === 'string' || t.name === 'int' || t.name === 'float' || t.name === 'bool' || t.name === 'date');
    }
    function includeInHeader (p) {
        var t = getType (p);
        return (p.paramType === 'header');
    }
    var allParams = $inMessage.data.slice(0);
    var allOutParams = $outMessage.data.slice(0);
    paramsInRoute =
            allParams
                    .filter(includeInRoute)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInRoute(p); });
    paramsInQuery =
            allParams
                    .filter(includeInQuery)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInQuery(p); });
    paramsInHeader =
            allParams
                    .filter(includeInHeader)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInHeader(p); });
    paramsInBody =
            allParams
                    .filter(function (p) {
                        return !includeInRoute(p);
                    });
    paramsOutHeader =
            $outMessage.data.slice(0)
                    .filter(includeInHeader);
    paramsOutBody =
            allOutParams
                    .filter(function (p) {
                        return !includeInHeader(p);
                    });
%>
export async function <%=op%>(event: any, context: any, callback: (err: Error | undefined, r?: { statusCode: number, body: string }) => void) {
    const input: any = {};
    try {
        const $body: any | undefined = (() => {
            if (event.body) {
                if (process.env.IS_OFFLINE) {
                    if ("string" === typeof(event.body)) {
                        event.body = JSON.parse(event.body);
                    }
                    if (event.body.data && typeof (event.body.data) === "string") {
                        event.body.data = JSON.parse(event.body.data);
                    }
                    return event.body.data;
                }
                else {
                    if ("string" === typeof(event.body)) {
                        return JSON.parse(event.body);
                    }
                    else {
                        return event.body;
                    }
                }
            }
            return undefined;
        })();
        
<% paramsInRoute.forEach(function (p) {
%>    input['<%= p.name %>'] = <%- realTypeMap(p, 'unescape(event.pathParameters[\'' + p.name + '\'])') %>;
<%
}); %><% paramsInQuery.forEach(function (p) {
%>    input['<%= p.name %>'] = <%- realTypeMap(p, 'event.queryStringParameters[\'' + (p.paramName || p.name) + '\']') %>;
<%
}); %><% paramsInHeader.forEach(function (p) {
%>    input['<%= p.name %>'] = <%- realTypeMap(p, ('event.headers[\'') + (p.headerName || ('X-' + p.name)) + '\']') %>;
<%
}); %><% if (paramsInBody.length === 1) {
%>    input['<%= paramsInBody[0].name %>'] = $body;
<%
} else if (paramsInBody.length) { paramsInBody.forEach(function (p, idx) {
%>    input['<%= p.name %>'] = $body[<%= idx %>];
<%
}); } %>
    let $req = input as <% $nschemaMessage = $inMessage; $nschemaMessageDirection = 'in'; %><% include ../messageType %>;

    const $result: <% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %> = await $service.<%=op%>(<%- ($inMessage.data.length === 1)? '$req, ' :$inMessage.data.map(function (p) { return '$req.' + p.name + ', '; }).join('') %>{ event: event, context: context });
    let response = {
            statusCode: context.statusCode || 200,
            body: JSON.stringify($result)
        };
        callback(undefined, response);
    }
    catch (err) {
        if (typeof context.statusCode !== "undefined") {
        callback(undefined, {
            statusCode: context.statusCode,
            body: err.message
        });
        } else {
            console.error(err);
            callback(err, undefined);
        }
    }
}

<% } %>