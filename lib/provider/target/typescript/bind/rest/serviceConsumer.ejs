import { NineJs, Logger } from 'ninejs/modules/ninejs-server'
import { default as WebServer, Request, Response } from 'ninejs/modules/webserver/WebServer';
import * as $verbs from 'ninejs/modules/webserver/Rest';
import { EventEmitter } from 'events';

<%
function realTypeMap(p, expr) {
    switch ((p.realType || {}).name) {
        case 'string':
            return expr;
        case 'int':
        case 'float':
            return 'Number(' + expr + ')';
        case 'bool':
            return '(' + expr + ' === \'true\')';
        case 'date':
            return '(new Date(' + expr + '))';
        default:
            return null;
    }
}
if (!$skipWrite) {
function computeImportMatrix(localNamespace, namespaceMapping) {
    var rootContext = {
        imports: {}
    };

    Object.keys($context.imports).forEach(function (p) {
        if (!rootContext.imports[p]) {
            rootContext.imports[p] = {};

            var ns = $context.imports[p];
            Object.keys(ns).forEach(function (name) {
                rootContext.imports[p][name] = true;
            });
        }
    });
Object.keys(rootContext.imports)
        .filter(function (p) {
            return p !== localNamespace;
        })
.map(function (p) {
%>import { <%= Object.keys(rootContext.imports[p]).join(', ') %> } from '<%=  namespaceMapping[p] || ('./' + p) %>';
<%
});
}
    computeImportMatrix(namespace, $target.$namespaceMapping || {});
}
$routePrefix = (typeof(routePrefix) !== 'undefined')? routePrefix : '';
%>

export interface <%= name %> {
<% for (var op in operations) {
    var $inMessage = operations[op].inMessage;
    var $outMessage = operations[op].outMessage;
    var $nschemaMessage,
            $nschemaMessageDirection;

%>    <%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %>: <%= $typescript.typeName(par.type, $nschema, null, null, $context) %><% }); %> )  : Promise<<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>>;
<% } %>

    on(eventName: 'callStarted', handler: (eventData: { name: string, timestamp: Date }) => any): this;
    on(eventName: 'callCompleted', handler: (eventData: { name: string, timestamp: Date, result: any }) => any): this;
    on(eventName: string, handler: Function): this;
}

export abstract class <%= name %>Base extends EventEmitter implements <%= name %> {
    logger: Logger;

<% for (var op in operations) {
    var $inMessage = operations[op].inMessage;
    var $outMessage = operations[op].outMessage;
    var $nschemaMessage,
        $nschemaMessageDirection;
%>    abstract async <%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %>: <%= $typescript.typeName(par.type, $nschema, null, null, $context) %><% }); %> )  : Promise<<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>>;
    protected async $raw<%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %>: <%= $typescript.typeName(par.type, $nschema, null, null, $context) %><% }); %>, req:Request, res: Response )  : Promise<<% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>> {
        this.emit('callStarted', { name: '<%= op %>', timestamp: new Date() });
        let result = await this.<%= op %>(<% $inMessage.data.forEach(function (par, $i) {
%><%= $i? ', ' : '' %><%= par.name %><% }); %> );
        this.emit('callCompleted', { name: '<%= op %>', timestamp: new Date(), result: result });
        return result;
    }
<% } %>

    constructor(private config: any, ninejs: NineJs, webserver: WebServer) {
        super();
        this.logger = ninejs.get('logger');

<% for (var op in operations) {
    var $inMessage = operations[op].inMessage;
    var $outMessage = operations[op].outMessage;
    var $nschemaMessage,
            $nschemaMessageDirection,
            route,
            method,
            paramsInRoute,
            paramsInQuery,
            paramsInHeader,
            paramsOutHeader,
            paramsInBody,
            paramsOutBody;
    route = operations[op].route || op;
    method = (operations[op].method || 'get').toLowerCase();
    function getType (p) {
        return (typeof(p.type) === 'string')? { namespace: '', name: p.type } : p.type;
    }
    function includeInRoute (p) {
        var t = getType (p);
        return (route.indexOf('{' + p.name + '}') >= 0) &&
                ((!p.modifier) || (!p.modifier.length)) &&
                (t.namespace === '') &&
                (t.name === 'string' || t.name === 'int' || t.name === 'float' || t.name === 'bool' || t.name === 'date');
    }
    function includeInQuery (p) {
        var t = getType (p);
        return (p.paramType === 'query') &&
                ((!p.modifier) || (!p.modifier.length)) &&
                (t.namespace === '') &&
                (t.name === 'string' || t.name === 'int' || t.name === 'float' || t.name === 'bool' || t.name === 'date');
    }
    function includeInHeader (p) {
        var t = getType (p);
        return (p.paramType === 'header');
    }
    var allParams = $inMessage.data.slice(0);
    var allOutParams = $outMessage.data.slice(0);
    paramsInRoute =
            allParams
                    .filter(includeInRoute)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInRoute(p); });
    paramsInQuery =
            allParams
                    .filter(includeInQuery)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInQuery(p); });
    paramsInHeader =
            allParams
                    .filter(includeInHeader)
                    .map(function (p) {
                        return {
                            name: p.name,
                            realType: getType(p),
                            type: {
                                namespace: '',
                                name: 'string'
                            }
                        }
                    });
    allParams = allParams.filter(function (p) { return !includeInHeader(p); });
    paramsInBody =
            allParams
                    .filter(function (p) {
                        return !includeInRoute(p);
                    });
    paramsOutHeader =
            $outMessage.data.slice(0)
                    .filter(includeInHeader);
    paramsOutBody =
            allOutParams
                    .filter(function (p) {
                        return !includeInHeader(p);
                    });
%>
        webserver.add($verbs.<%= operations[op].method || 'get' %><<% $nschemaMessage = $inMessage; $nschemaMessageDirection = 'in'; %><% include ../messageType %>, <% $nschemaMessage = $outMessage; $nschemaMessageDirection = 'out'; %><% include ../messageType %>>({
            route: '<%= (operations[op].route || op).replace(/\{([^\}]+?)\}/g, function (match, g1) { return ':' + g1; }) %>',
            inputMap: (req: Request): <% $nschemaMessage = $inMessage; $nschemaMessageDirection = 'in'; %><% include ../messageType %> => {
                let input: any = {};
<% paramsInRoute.forEach(function (p) {
%>                input['<%= p.name %>'] = <%- realTypeMap(p, 'req.params[\'' + p.name + '\']') %>;
<%
}); %><% paramsInQuery.forEach(function (p) {
%>                input['<%= p.name %>'] = <%- realTypeMap(p, 'req.query[\'' + (p.paramName || p.name) + '\']') %>;
<%
}); %><% paramsInHeader.forEach(function (p) {
%>                input['<%= p.name %>'] = <%- realTypeMap(p, 'req.header(\'' + (p.headerName || p.name) + '\')') %>;
<%
}); %><% if (paramsInBody.length === 1) {
%>                input['<%= paramsInBody[0].name %>'] = req.body;
<%
} else if (paramsInBody.length) { paramsInBody.forEach(function (p, idx) {
%>                input['<%= p.name %>'] = req.body[<%= idx %>];
<%
}); } %>
                let result = input as <% $nschemaMessage = $inMessage; $nschemaMessageDirection = 'in'; %><% include ../messageType %>;
                return result;
            }
        }, (input: <% $nschemaMessage = $inMessage; $nschemaMessageDirection = 'in'; %><% include ../messageType %>, request: Request, response: Response) => {
            return this.$raw<%= op %>(<%- $inMessage.data.map(function (p) { return 'input.' + p.name + ', '; }).join('') %> request, response);
        })<% if ($routePrefix) { %>, '<%= $routePrefix %>'<% } %>);
<% } %>
    };
};